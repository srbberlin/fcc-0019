(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
'use strict';

var res = function () {
  var url = 'https://raw.githubusercontent.com/DealPete/forceDirected/master/countries.json';

  return {
    do: function _do(f) {
      d3.json(url, function (error, res) {
        if (error) {
          throw error;
        } else {
          d3.xml('img/svg/symbols.svg').mimeType('image/svg+xml').get(function (error, xml) {
            if (error) {
              throw error;
            }
            document.body.appendChild(xml.documentElement);
            f(res.nodes, res.links);
          });
        }
      });
    }
  };
}();

module.exports = res;

},{}],2:[function(require,module,exports){
'use strict';

var n = document.getElementsByTagName('body')[0];
var width = n.clientWidth - 4,
    height = n.clientHeight - 4;
var data = require('./data');
var alpha = 1.9;
var scale = .03;

data.do(function (dNodes, dLinks) {
  var svg = void 0,
      base = void 0,
      links = void 0,
      nodes = void 0,
      labels = void 0,
      sim = void 0;

  var ticked = function ticked() {
    nodes.attr('transform', function (d) {
      return 'translate(' + (d.x - 8) + ',' + (d.y - 6) + ') scale(' + scale + ')';
    });

    labels.attr('x', function (d) {
      return d.x;
    }).attr('y', function (d) {
      return d.y - 12;
    });

    links.attr('x1', function (d) {
      return d.source.x;
    }).attr('y1', function (d) {
      return d.source.y;
    }).attr('x2', function (d) {
      return d.target.x;
    }).attr('y2', function (d) {
      return d.target.y;
    });
  };

  sim = d3.forceSimulation(dNodes).force('link', d3.forceLink(dLinks).distance(60)).force('charge', d3.forceManyBody().strength(-100).distanceMax(500)).force('collide', d3.forceCollide().radius(12).strength(12)).force('x', d3.forceX().strength(.05)).force('y', d3.forceY().strength(.1)).on('tick', ticked);

  var dragstarted = function dragstarted(d) {
    if (!d3.event.active) {
      sim.alphaTarget(alpha).restart();
    }
    d.fx = d.x;
    d.fy = d.y;
  };

  var dragged = function dragged(d) {
    d.fx = d3.event.x;
    d.fy = d3.event.y;
  };

  var dragended = function dragended(d) {
    if (!d3.event.active) {
      sim.alphaTarget(alpha);
    }
    d.fx = null;
    d.fy = null;
  };

  function over(d) {
    d3.select('#code_' + d.code).attr('display', null);
  }

  function out(d) {
    d3.select('#code_' + d.code).attr('display', 'none');
  }

  svg = d3.select('body').append('svg').attr('width', width).attr('height', height).attr('text-anchor', 'middle').style('font-family', 'sans-serif');

  svg.append('text').attr('transform', 'translate(' + width / 2 + ',' + height / 10 + ')').attr('font-size', 34).attr('font-weight', 'bold').text('National Contiguity with a Force Directed Graph');

  base = svg.append('g').attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');

  links = base.append('g').attr('stroke', '#000').attr('stroke-width', 1.5).selectAll('line').data(dLinks).enter().append('line');

  nodes = base.append('g').selectAll('use').data(dNodes).enter().append('use').attr('href', function (d) {
    return '#' + d.code;
  }).attr('class', function (d) {
    return 'flag flag-' + d.code;
  }).on('mouseover', over).on('mouseout', out).call(d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended));

  labels = base.append('g').attr('class', 'labels').attr('stroke', 'red').style('font-size', '20px').selectAll('text').data(dNodes).enter().append('text').attr('id', function (d) {
    return 'code_' + d.code;
  }).attr('display', 'none').text(function (d) {
    return d.country;
  });
});

},{"./data":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
