(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var res = function () {
  var url = 'https://raw.githubusercontent.com/DealPete/forceDirected/master/countries.json';
  return {
    do: function _do(f) {
      d3.json(url, function (error, res) {
        if (error) {
          throw error;
        } else {
          d3.xml('img/svg/symbols.svg').mimeType('image/svg+xml').get(function (error, xml) {
            if (error) {
              throw error;
            }

            document.body.appendChild(xml.documentElement);
            f(res.nodes, res.links);
          });
        }
      });
    }
  };
}();

module.exports = res;

},{}],2:[function(require,module,exports){
"use strict";

var n = document.getElementsByTagName('body')[0];
var width = n.clientWidth - 4,
    height = n.clientHeight - 4;

var data = require('./data');

var alpha = 1.9;
var scale = .03;
data.do(function (dNodes, dLinks) {
  var svg, base, links, nodes, labels, sim;

  var ticked = function ticked() {
    nodes.attr('transform', function (d) {
      return "translate(".concat(d.x - 8, ",").concat(d.y - 6, ") scale(").concat(scale, ")");
    });
    labels.attr('x', function (d) {
      return d.x;
    }).attr('y', function (d) {
      return d.y - 12;
    });
    links.attr('x1', function (d) {
      return d.source.x;
    }).attr('y1', function (d) {
      return d.source.y;
    }).attr('x2', function (d) {
      return d.target.x;
    }).attr('y2', function (d) {
      return d.target.y;
    });
  };

  sim = d3.forceSimulation(dNodes).force('link', d3.forceLink(dLinks).distance(60)).force('charge', d3.forceManyBody().strength(-100).distanceMax(500)).force('collide', d3.forceCollide().radius(12).strength(12)).force('x', d3.forceX().strength(.05)).force('y', d3.forceY().strength(.1)).on('tick', ticked);

  var dragstarted = function dragstarted(d) {
    if (!d3.event.active) {
      sim.alphaTarget(alpha).restart();
    }

    d.fx = d.x;
    d.fy = d.y;
  };

  var dragged = function dragged(d) {
    d.fx = d3.event.x;
    d.fy = d3.event.y;
  };

  var dragended = function dragended(d) {
    if (!d3.event.active) {
      sim.alphaTarget(alpha);
    }

    d.fx = null;
    d.fy = null;
  };

  function over(d) {
    d3.select("#code_".concat(d.code)).attr('display', null);
  }

  function out(d) {
    d3.select("#code_".concat(d.code)).attr('display', 'none');
  }

  svg = d3.select('body').append('svg').attr('width', width).attr('height', height).attr('text-anchor', 'middle').style('font-family', 'sans-serif');
  svg.append('text').attr('transform', "translate(".concat(width / 2, ",").concat(height / 10, ")")).attr('font-size', 34).attr('font-weight', 'bold').text('National Contiguity with a Force Directed Graph');
  base = svg.append('g').attr('transform', "translate(".concat(width / 2, ",").concat(height / 2, ")"));
  links = base.append('g').attr('stroke', '#000').attr('stroke-width', 1.5).selectAll('line').data(dLinks).enter().append('line');
  nodes = base.append('g').selectAll('use').data(dNodes).enter().append('use').attr('href', function (d) {
    return "#".concat(d.code);
  }).attr('class', function (d) {
    return "flag flag-".concat(d.code);
  }).on('mouseover', over).on('mouseout', out).call(d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended));
  labels = base.append('g').attr('class', 'labels').attr('stroke', 'red').style('font-size', '20px').selectAll('text').data(dNodes).enter().append('text').attr('id', function (d) {
    return "code_".concat(d.code);
  }).attr('display', 'none').text(function (d) {
    return d.country;
  });
});

},{"./data":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
